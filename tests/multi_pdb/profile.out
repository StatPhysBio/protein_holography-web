Timer unit: 1e-06 s

Total time: 189.587 s
File: /mmfs1/gscratch/spe/gvisan01/protein_holography-web/tests/multi_pdb/../../protein_holography_web/inference/hcnn_inference.py
Function: predict_from_pdbfile at line 114

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   114                                           # @profile
   115                                           def predict_from_pdbfile(pdb_file: str,
   116                                                                     models: List,
   117                                                                     hparams: List[Dict],
   118                                                                     batch_size: int,
   119                                                                     regions: Optional[Dict[str, List[Tuple[str, int, str]]]] = None):
   120                                               '''
   121                                               '''
   122                                           
   123         3       2920.8    973.6      0.0      data_irreps, ls_indices = get_data_irreps(hparams)
   124                                           
   125                                               # this code template would be useful to limit the number of residues to compute zernikegrams - and do inference - for
   126         3          2.4      0.8      0.0      if regions is not None:
   127                                                   def get_residues(np_protein):
   128                                                       res_ids = np.unique(np_protein['res_ids'], axis=0)
   129                                                       all_res_ids_info_we_care_about = res_ids[:, 2:5]
   130                                                       region_ids = []
   131                                                       for region_name in regions:
   132                                                           region_ids.extend(regions[region_name])
   133                                                       region_ids = np.unique(np.array(region_ids).astype(all_res_ids_info_we_care_about.dtype), axis=0)
   134                                                       indices = np.where(np.isin(all_res_ids_info_we_care_about, region_ids).all(axis=1))[0]
   135                                                       return res_ids[indices]
   136                                               else:
   137         3          1.6      0.5      0.0          get_residues = None
   138                                           
   139         6          8.8      1.5      0.0      get_structural_info_kwargs = {'padded_length': None,
   140         3          1.1      0.4      0.0                                    'SASA': True,
   141         3          0.9      0.3      0.0                                    'charge': True,
   142         3          0.8      0.3      0.0                                    'DSSP': False,
   143         3          0.8      0.3      0.0                                    'angles': False,
   144         3          0.7      0.2      0.0                                    'fix': True,
   145         3          0.7      0.2      0.0                                    'hydrogens': True,
   146         3          0.9      0.3      0.0                                    'multi_struct': 'warn'}
   147                                           
   148         6          5.2      0.9      0.0      get_neighborhoods_kwargs = {'r_max': hparams['rcut'],
   149         3          1.9      0.6      0.0                                  'remove_central_residue': hparams['remove_central_residue'],
   150         3         15.2      5.1      0.0                                  'backbone_only': set(hparams['channels']) == set(['CA', 'C', 'O', 'N']),
   151         3          0.8      0.3      0.0                                  'get_residues': get_residues}
   152                                           
   153         6          5.3      0.9      0.0      get_zernikegrams_kwargs = {'r_max': hparams['rcut'],
   154         3          1.3      0.4      0.0                                 'radial_func_mode': hparams['radial_func_mode'],
   155         3          1.3      0.4      0.0                                 'radial_func_max': hparams['radial_func_max'],
   156         3          1.2      0.4      0.0                                 'Lmax': hparams['lmax'],
   157         3         10.0      3.3      0.0                                 'channels': get_channels(hparams['channels']),
   158         3          6.0      2.0      0.0                                 'backbone_only': set(hparams['channels']) == set(['CA', 'C', 'O', 'N']),
   159         3          1.0      0.3      0.0                                 'request_frame': False,
   160         3          1.8      0.6      0.0                                 'get_physicochemical_info_for_hydrogens': hparams['get_physicochemical_info_for_hydrogens'],
   161         3          1.5      0.5      0.0                                 'rst_normalization': hparams['rst_normalization']}
   162                                               
   163         3  164246301.6    5e+07     86.6      zgrams_dict = get_zernikegrams_from_pdbfile(pdb_file, get_structural_info_kwargs, get_neighborhoods_kwargs, get_zernikegrams_kwargs)
   164                                           
   165         3          3.0      1.0      0.0      if regions is None: # return the predictions
   166         3   25337667.9    8e+06     13.4          ensemble_predictions_dict = predict_from_zernikegrams(zgrams_dict['zernikegram'], zgrams_dict['res_id'], models, batch_size, data_irreps)
   167                                               else: # return the predictions for each region, in a dict indexed by region_name
   168                                                   ensemble_predictions_dict = {}
   169                                                   for region_name in regions:
   170                                                       ensemble_predictions_dict[region_name] = predict_from_zernikegrams(zgrams_dict['zernikegram'], zgrams_dict['res_id'], models, batch_size, data_irreps, region=regions[region_name])
   171                                               
   172         3          1.3      0.4      0.0      return ensemble_predictions_dict

Total time: 25.3363 s
File: /mmfs1/gscratch/spe/gvisan01/protein_holography-web/tests/multi_pdb/../../protein_holography_web/inference/hcnn_inference.py
Function: predict_from_zernikegrams at line 175

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   175                                           # @profile
   176                                           def predict_from_zernikegrams(
   177                                               np_zgrams: np.ndarray,
   178                                               np_res_ids: np.ndarray,
   179                                               models: List,
   180                                               batch_size: int,
   181                                               data_irreps: o3.Irreps,
   182                                               region: Optional[List[Tuple[str, int, str]]] = None,
   183                                           ):
   184         3          3.4      1.1      0.0      if region is not None:
   185                                                   region_idxs = get_res_locs_from_tups(np_res_ids, region)
   186                                                   if len(region_idxs.shape) == 0:
   187                                                       region_idxs = region_idxs.reshape([1]) # if only one residue, make it still a 1D array instead of a scalar so that stuff doesn't break later
   188                                                   np_zgrams = np_zgrams[region_idxs]
   189                                                   np_res_ids = np_res_ids[region_idxs]
   190                                           
   191         3          3.9      1.3      0.0      N = np_zgrams.shape[0]
   192         3          7.2      2.4      0.0      aas = np_res_ids[:, 0]
   193         3       1144.2    381.4      0.0      labels = np.array([ol_to_ind_size[x.decode('utf-8')] for x in aas])
   194                                           
   195         3         31.6     10.5      0.0      frames = np.zeros((N, 3, 3)) # dummy frames
   196         3      23108.6   7702.9      0.1      dataset = ZernikegramsDataset(np_zgrams, data_irreps, labels, list(zip(list(frames), list(map(tuple, np_res_ids)))))
   197                                           
   198         3          8.9      3.0      0.0      ensemble_predictions_dict = {'embeddings': [], 'logits': [], 'probabilities': [], 'best_indices': [], 'targets': None, 'res_ids': np_res_ids}
   199        15         18.6      1.2      0.0      for model in models:
   200                                           
   201                                                   # not sure if I should run re-instantiate the dataloader?
   202        12       1658.5    138.2      0.0          dataloader = torch.utils.data.DataLoader(dataset, batch_size=batch_size, shuffle=False, drop_last=False)
   203                                           
   204        12   25304441.3    2e+06     99.9          curr_model_predictions_dict = model.predict(dataloader, device='cuda' if torch.cuda.is_available() else 'cpu')
   205                                           
   206        12        616.1     51.3      0.0          assert (ensemble_predictions_dict['res_ids'][:5, :] == curr_model_predictions_dict['res_ids'].T[:5, :]).all() # sanity check that order of stuff is preserved, have to transpose it for some reason
   207                                           
   208        12         21.5      1.8      0.0          ensemble_predictions_dict['embeddings'].append(curr_model_predictions_dict['embeddings'])
   209        12          9.3      0.8      0.0          ensemble_predictions_dict['logits'].append(curr_model_predictions_dict['logits'])
   210        12         11.7      1.0      0.0          ensemble_predictions_dict['probabilities'].append(curr_model_predictions_dict['probabilities'])
   211        12          9.8      0.8      0.0          ensemble_predictions_dict['best_indices'].append(curr_model_predictions_dict['best_indices'])
   212                                           
   213        12          9.6      0.8      0.0          if ensemble_predictions_dict['targets'] is None:
   214         3          3.0      1.0      0.0              ensemble_predictions_dict['targets'] = curr_model_predictions_dict['targets']
   215                                                   else:
   216         9         85.0      9.4      0.0              assert (ensemble_predictions_dict['targets'][:10] == curr_model_predictions_dict['targets'][:10]).all()
   217                                           
   218         3       4236.3   1412.1      0.0      ensemble_predictions_dict['embeddings'] = np.stack(ensemble_predictions_dict['embeddings'], axis=0) # TODO return concatenated versions of embeddings instead
   219         3        352.9    117.6      0.0      ensemble_predictions_dict['logits'] = np.stack(ensemble_predictions_dict['logits'], axis=0)
   220         3        411.6    137.2      0.0      ensemble_predictions_dict['probabilities'] = np.stack(ensemble_predictions_dict['probabilities'], axis=0)
   221         3         91.6     30.5      0.0      ensemble_predictions_dict['best_indices'] = np.stack(ensemble_predictions_dict['best_indices'], axis=0)
   222                                           
   223         3          0.8      0.3      0.0      return ensemble_predictions_dict

Total time: 164.246 s
File: /mmfs1/gscratch/spe/gvisan01/protein_holography-web/tests/multi_pdb/../../protein_holography_web/protein_processing/pipeline.py
Function: get_zernikegrams_from_pdbfile at line 8

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     8                                           # @profile
     9                                           def get_zernikegrams_from_pdbfile(pdbfile: str,
    10                                                                                get_structural_info_kwargs: Dict,
    11                                                                                get_neighborhoods_kwargs: Dict,
    12                                                                                get_zernikegrams_kwargs: str):
    13                                           
    14         3  132543588.9    4e+07     80.7      proteins = get_structural_info(pdbfile, **get_structural_info_kwargs)
    15                                               
    16         3     762625.4 254208.5      0.5      neighborhoods = get_neighborhoods(proteins, **get_neighborhoods_kwargs)
    17                                           
    18         3   30939376.7    1e+07     18.8      zernikegrams = get_zernikegrams(neighborhoods, **get_zernikegrams_kwargs)
    19                                           
    20         3          1.9      0.6      0.0      return zernikegrams

